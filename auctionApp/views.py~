# Create your views here.
from django.contrib.auth.decorators import login_required
from django.contrib.auth.forms import UserCreationForm
from django.contrib import auth
from django.shortcuts import render
from django.http import HttpResponseRedirect
from django.views import View
from django.utils.decorators import method_decorator
from django.core.urlresolvers import reverse
from django.contrib import messages
from django.contrib.auth import logout

from auctionApp.models import auction
from auctionApp.forms import createauction, confauction
import datetime

def archive(request):
    auctions = auction.objects.order_by('-timestamp')
    return render(request, "archive.html",{'auctions':auctions})


def editauction(request, offset):
    if not request.user.is_authenticated():
        return HttpResponseRedirect('/login/?next=%s' % request.path)
    else:
        if offset:
                auction = auction.objects.filter(id = offset)
                if auction:
                    auction = auction.objects.get(id = offset)
                    return render(request,"editauction.html",
                                          {'user' : request.user, "title" : auction.title, "bid": auction.id, "body" : auction.body })
                else:
                    return render(request,"editauction.html",
                                          {'user' : request.user, "error" : "No auction selected" })
        else:
            return render(request,"editauction.html",
                                          {'user' : request.user, "error" : "No auction selected" })

'''
def saveauction(request, offset):
    b_title = request.POST.get('title', '')
    b_body = request.POST.get('body', '')
    auction = auction.objects.get(id = offset)
    auction.title = b_title
    auction.body = b_body
    auction.timestamp =datetime.datetime.now()
    auction.save()
    return HttpResponseRedirect('/myauction/')
'''

'''
def sauction(request):
    form = createauction(request.POST)
    if form.is_valid():
        cd = form.cleaned_data
        b_title = cd['title']
        b_body = cd['body']
        auction = auction(title =b_title,
                    body = b_body,
                    timestamp = datetime.datetime.now())
        auction.save()
        return HttpResponseRedirect('/myauction/')
    else:
         form = createauction()
         errors ="Form data is not valid"
         return render(request,'createauction.html', {'form' : form,
                                                    "error" : "Not valid data" })
'''
@method_decorator(login_required, name="dispatch")
class Addauction(View):

    def get(self, request):
        form = createauction()
        return render(request,'createauction.html', {'form' : form})

    def post(self, request):
        form = createauction(request.POST)
        if form.is_valid():
            cd = form.cleaned_data
            auction_t = cd['title']
            auction_b = cd['body']
            form = confauction()
            return render(request,'wizardtest.html', {'form' : form, "b_title" : auction_t, "b_body" : auction_b})
        else:
            messages.add_message(request, messages.ERROR, "Not valid data")
            return render(request,'createauction.html', {'form' : form,})

def saveauction(request):
    option = request.POST.get('option', '')
    if option == 'Yes':
        b_title = request.POST.get('b_title', '')
        b_body = request.POST.get('b_body', '')
        auction = auction(title =b_title, body = b_body, timestamp = datetime.datetime.now())
        auction.save()
        messages.add_message(request, messages.INFO, "New auction has been saved")
        return HttpResponseRedirect(reverse("home"))
    else:
        return HttpResponseRedirect(reverse("home"))


def register (request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            new_user = form.save()

            messages.add_message(request, messages.INFO, "New User is created. Please Login")

            return HttpResponseRedirect(reverse("home"))
        else:
            form = UserCreationForm(request.POST)
    else:
        form =UserCreationForm()

    return render(request,"registration/registration.html", {'form': form})


def login_view (request):
    if request.method == 'POST':
        username = request.POST.get('username', '')
        password = request.POST.get('password', '')
        nextTo = request.GET.get('next', reverse("home"))
        user = auth.authenticate(username=username, password=password)

        if user is not None and user.is_active:
            auth.login(request,user)
            return HttpResponseRedirect(nextTo)

    return render(request,"login.html")

def logout_view(request):
    logout(request)
    messages.add_message(request, messages.INFO, "Logged out")
    return HttpResponseRedirect(reverse("home"))
